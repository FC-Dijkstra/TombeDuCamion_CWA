type Query {
    "Récupérer toutes les catégories"
    getCategories : [String]

    "Récupérer la wishlist de l'utilisateur"
    getWishlist(auth : AuthInfo) : [ID]

    "Récupérer un produit"
    getProduct(p_uid: ID!): Product
!
    "Récupérer tous les produits"
    getAllProducts: [Product]

    "Rechercher un produit"
    searchProduct(searchString: String!, limit: Int!, offset: Int!, sort: SortType!): SearchResult

    "Obtenir les meilleurs produits"
    top(categorie: String!, champ: String!) : [Product]

    "Connecter un utilisateur"
    connect(nickname: String!, hash: String!) : AuthData

    "Déconnecter un utilisateur"
    disconnect(auth: AuthInfo!) : String

    "L'utilisateur est il connecté ?"
    isConnected(auth: AuthInfo!) : Boolean

    "Récupérer les informations d'un utilisateur"
    getUser(uid: String!) : User

    "Récupérer le pseudo d'un utilisateur"
    getNickname(uid: String!) : String

    "Récupérer l'historique de l'utilisateur"
    getHistory(uid: String!) : [HistoryElement]

    "Récupérer la notation d'un utilisateur"
    getNotation(target_uid: String!) : Float

    "Récupérer un commentaire"
    getComment(c_uid: String!) : Comment

    "Récupérer tous les commentaires d'un produit"
    getCommentsOfProduct(p_uid: String!) : [Comment]
}

type AuthData {
    "Identifiant de l'utilisateur"
    uid: String!

    "Clé unique"
    token: String!
}

enum SortType {
    NO_SORT,
    LETTER_ASCENDING,
    LETTER_DESCENDING,
    PRICE_ASCENDING,
    PRICE_DESCENDING
}

input AuthInfo {
    "Identifiant de l'utilisateur"
    uid: String!

    "Clé unique"
    token: String!
}